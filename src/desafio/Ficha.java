
package desafio;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static sun.security.jgss.GSSUtil.login;

/**
 *
 * @author juan
 */


/**
 *
 Clase que contiene una plantilla que recupera datos de la BBDD para formar una ficha técnica para cada película
 */
public class Ficha extends javax.swing.JDialog {

   int xMouse, yMouse; //estas variables servirán para localizar la posición del ratón
   
    /**
     *
     * @param parent
     * @param modal
     */
    public Ficha(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null); //con esto la pantalla saldrá centrada
        
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelPoster = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        labelTitulo = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        labelDirector = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JSeparator();
        labelAño = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jSeparator13 = new javax.swing.JSeparator();
        labelGenero = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jSeparator15 = new javax.swing.JSeparator();
        labelDuracion = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jSeparator17 = new javax.swing.JSeparator();
        labelNota = new javax.swing.JLabel();
        labelFichaTecnica = new javax.swing.JLabel();
        panelHeaderFicha = new javax.swing.JPanel();
        btnSalirFicha = new javax.swing.JButton();
        btnQuieroVer = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnFavorita = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnVista = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1506, 961));
        setMinimumSize(new java.awt.Dimension(1506, 961));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setMaximumSize(new java.awt.Dimension(1506, 961));
        jPanel1.setMinimumSize(new java.awt.Dimension(1506, 961));
        jPanel1.setPreferredSize(new java.awt.Dimension(1506, 961));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelPoster.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelPoster.setMaximumSize(new java.awt.Dimension(1500, 1000));
        labelPoster.setMinimumSize(new java.awt.Dimension(1500, 1000));
        labelPoster.setPreferredSize(new java.awt.Dimension(1500, 1000));
        jPanel1.add(labelPoster, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 510, 770));

        jLabel5.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Título");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 200, 110, 30));
        jPanel1.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 260, 780, 10));

        labelTitulo.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        labelTitulo.setForeground(new java.awt.Color(255, 255, 255));
        labelTitulo.setText("jLabel3");
        jPanel1.add(labelTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 230, 750, 40));

        jLabel13.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Dirigida por");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 290, 190, 30));
        jPanel1.add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 350, 780, 10));

        labelDirector.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        labelDirector.setForeground(new java.awt.Color(255, 255, 255));
        labelDirector.setText("jLabel3");
        jPanel1.add(labelDirector, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 320, 750, 40));

        jLabel17.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Año");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 380, 110, 30));
        jPanel1.add(jSeparator11, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 440, 780, 10));

        labelAño.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        labelAño.setForeground(new java.awt.Color(255, 255, 255));
        labelAño.setText("jLabel3");
        jPanel1.add(labelAño, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 410, 750, 40));

        jLabel21.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Géneros");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 470, 110, 30));
        jPanel1.add(jSeparator13, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 530, 780, 10));

        labelGenero.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        labelGenero.setForeground(new java.awt.Color(255, 255, 255));
        labelGenero.setText("jLabel3");
        jPanel1.add(labelGenero, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 500, 750, 40));

        jLabel25.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("Duración");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 560, 150, 30));
        jPanel1.add(jSeparator15, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 620, 780, 10));

        labelDuracion.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        labelDuracion.setForeground(new java.awt.Color(255, 255, 255));
        labelDuracion.setText("jLabel3");
        jPanel1.add(labelDuracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 590, 750, 40));

        jLabel29.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("Puntuación");
        jPanel1.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 650, 160, 30));
        jPanel1.add(jSeparator17, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 710, 780, 10));

        labelNota.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        labelNota.setForeground(new java.awt.Color(255, 255, 255));
        labelNota.setText("jLabel3");
        jPanel1.add(labelNota, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 680, 750, 40));

        labelFichaTecnica.setFont(new java.awt.Font("Courier New", 1, 48)); // NOI18N
        labelFichaTecnica.setForeground(new java.awt.Color(255, 255, 255));
        labelFichaTecnica.setText("FICHA TÉCNICA");
        jPanel1.add(labelFichaTecnica, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 70, 410, 80));

        panelHeaderFicha.setBackground(new java.awt.Color(51, 51, 51));
        panelHeaderFicha.setForeground(new java.awt.Color(51, 51, 51));
        panelHeaderFicha.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelHeaderFichaMouseDragged(evt);
            }
        });
        panelHeaderFicha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelHeaderFichaMousePressed(evt);
            }
        });
        panelHeaderFicha.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSalirFicha.setBackground(new java.awt.Color(242, 242, 242));
        btnSalirFicha.setFont(new java.awt.Font("Courier New", 0, 36)); // NOI18N
        btnSalirFicha.setText("X");
        btnSalirFicha.setBorder(null);
        btnSalirFicha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSalirFicha.setFocusable(false);
        btnSalirFicha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSalirFichaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSalirFichaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSalirFichaMouseExited(evt);
            }
        });
        btnSalirFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirFichaActionPerformed(evt);
            }
        });
        panelHeaderFicha.add(btnSalirFicha, new org.netbeans.lib.awtextra.AbsoluteConstraints(1420, 0, 90, 80));

        jPanel1.add(panelHeaderFicha, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1510, 80));

        btnQuieroVer.setBackground(new java.awt.Color(0, 204, 255));
        btnQuieroVer.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        btnQuieroVer.setText("QUIERO VER");
        btnQuieroVer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnQuieroVer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnQuieroVer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnQuieroVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuieroVerActionPerformed(evt);
            }
        });
        jPanel1.add(btnQuieroVer, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 800, 140, 70));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/favorita.png"))); // NOI18N
        jLabel2.setText("jLabel1");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 800, 70, 70));

        jLabel3.setBackground(new java.awt.Color(0, 204, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/quierover.png"))); // NOI18N
        jLabel3.setText("jLabel1");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 800, 70, 70));

        btnFavorita.setBackground(new java.awt.Color(255, 255, 153));
        btnFavorita.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        btnFavorita.setText("FAVORITA");
        btnFavorita.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnFavorita.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFavorita.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFavorita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFavoritaActionPerformed(evt);
            }
        });
        jPanel1.add(btnFavorita, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 800, 140, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/vista.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 800, 70, 70));

        btnVista.setBackground(new java.awt.Color(0, 204, 153));
        btnVista.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        btnVista.setText("VISTA");
        btnVista.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnVista.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVista.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnVista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVistaActionPerformed(evt);
            }
        });
        jPanel1.add(btnVista, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 800, 140, 70));

        btnImprimir.setBackground(new java.awt.Color(242, 242, 242));
        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/printer.png"))); // NOI18N
        btnImprimir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnImprimir.setFocusable(false);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        jPanel1.add(btnImprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 90, 50, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1506, 961));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirFichaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalirFichaMouseClicked
        setVisible(false); // Oculta el diálogo actual (Catalogo)
        getParent().setVisible(true); // Muestra el JFrame padre
    }//GEN-LAST:event_btnSalirFichaMouseClicked

    private void btnSalirFichaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalirFichaMouseEntered
        btnSalirFicha.setBackground(new Color(96,133,139));
        btnSalirFicha.setForeground(Color.white);
    }//GEN-LAST:event_btnSalirFichaMouseEntered

    private void btnSalirFichaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSalirFichaMouseExited
        btnSalirFicha.setBackground(new Color(242,242,242));
        btnSalirFicha.setForeground(Color.black);
    }//GEN-LAST:event_btnSalirFichaMouseExited

    private void panelHeaderFichaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelHeaderFichaMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x- xMouse, y - yMouse);
    }//GEN-LAST:event_panelHeaderFichaMouseDragged

    private void panelHeaderFichaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelHeaderFichaMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_panelHeaderFichaMousePressed

    private void btnVistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVistaActionPerformed
     /**
 * Maneja el evento de clic en el botón "Vista". Obtiene el título de la película mostrada en la ficha,
 * el ID del usuario actual, y el ID de la película basado en el título. Luego, verifica si la película ya está
 * en la lista de "Vistas" del usuario. Si está en la lista, muestra un mensaje de advertencia. Si no está en la
 * lista, inserta la película en la lista de "Vistas" del usuario.
 * 
 * @param evt El evento de acción que desencadena este método.
 */                                         
    // Obtener el título de la película mostrada en la ficha
    String tituloPelicula = labelTitulo.getText();
    
    try {
        // Obtener el ID del usuario actual
        String usuarioActual = obtenerUsuarioActual(); 
        int idUsuario = obtenerIdUsuario(usuarioActual);
        
        // Obtener el ID de la película basado en el título
        int idPelicula = obtenerIdPelicula(tituloPelicula);
        
        // Verificar si la película ya está en la lista de "Vistas" del usuario
        if (peliculaEnLista(idUsuario, idPelicula, "Vista")) {
            JOptionPane.showMessageDialog(null, "La película ya está en tu lista de 'Vistas'.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            // Insertar la película en la lista de "Vistas" del usuario
            insertarEnLista(idUsuario, idPelicula, "Vista");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al procesar la solicitud", "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }


    }//GEN-LAST:event_btnVistaActionPerformed

    private void btnQuieroVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuieroVerActionPerformed
        
/**
 * Maneja el evento de clic en el botón "Quiero ver". Obtiene el título de la película mostrada en la ficha,
 * el ID del usuario actual, y el ID de la película basado en el título. Luego, verifica si la película ya está
 * en la lista de "Quiero ver" del usuario. Si está en la lista, muestra un mensaje de advertencia. Si no está en la
 * lista, inserta la película en la lista de "Quiero ver" del usuario.
 * 
 * @param evt El evento de acción que desencadena este método.
 */

        // Obtener el título de la película mostrada en la ficha
    String tituloPelicula = labelTitulo.getText(); 
    
    try {
        // Obtener el ID del usuario actual
        String usuarioActual = obtenerUsuarioActual(); 
        int idUsuario = obtenerIdUsuario(usuarioActual);
        
        // Obtener el ID de la película basado en el título
        int idPelicula = obtenerIdPelicula(tituloPelicula);
        
        // Verificar si la película ya está en la lista de "Quiero ver" del usuario
        if (peliculaEnLista(idUsuario, idPelicula, "Quiero ver")) {
            JOptionPane.showMessageDialog(null, "La película ya está en tu lista de 'Quiero ver'.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            // Insertar la película en la lista de "Quiero ver" del usuario
            insertarEnLista(idUsuario, idPelicula, "Quiero ver");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al procesar la solicitud", "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_btnQuieroVerActionPerformed

    private void btnFavoritaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFavoritaActionPerformed
      
        /**
 * Maneja el evento de clic en el botón "Favorita". Obtiene el título de la película mostrada en la ficha,
 * el ID del usuario actual, y el ID de la película basado en el título. Luego, verifica si la película ya está
 * en la lista de "Favoritas" del usuario. Si está en la lista, muestra un mensaje de advertencia. Si no está en la
 * lista, inserta la película en la lista de "Favoritas" del usuario.
 * 
 * @param evt El evento de acción que desencadena este método.
 */

        // Obtener el título de la película mostrada en la ficha
    String tituloPelicula = labelTitulo.getText(); 
    
    try {
        // Obtener el ID del usuario actual
        String usuarioActual = obtenerUsuarioActual(); 
        int idUsuario = obtenerIdUsuario(usuarioActual);
        
        // Obtener el ID de la película basado en el título
        int idPelicula = obtenerIdPelicula(tituloPelicula);
        
        // Verificar si la película ya está en la lista de "Favoritas" del usuario
        if (peliculaEnLista(idUsuario, idPelicula, "Favorita")) {
            JOptionPane.showMessageDialog(null, "La película ya está en tu lista de 'Favoritas'.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {
            // Insertar la película en la lista de "Favoritas" del usuario
            insertarEnLista(idUsuario, idPelicula, "Favorita");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al procesar la solicitud", "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_btnFavoritaActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
                                         
    imprimirFichaTecnica();

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnSalirFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirFichaActionPerformed
        setVisible(false); // Oculta el diálogo actual 
    getParent().setVisible(true); // Muestra el JFrame padre
    }//GEN-LAST:event_btnSalirFichaActionPerformed

    
    /* SETTERS para referenciar las etiquetas desde otras clases*/

    /**
     *
     * @param titulo
     */

    
    public void setTitulo(String titulo) {
        labelTitulo.setText(titulo);
    }

    /**
     *
     * @param director
     */
    public void setDirector(String director) {
        labelDirector.setText(director);
    }

    /**
     *
     * @param año
     */
    public void setAño(int año) {
        labelAño.setText(Integer.toString(año));
    }

    /**
     *
     * @param genero
     */
    public void setGenero(String genero) {
        labelGenero.setText(genero);
    }

    /**
     *
     * @param duracion
     */
    public void setDuracion(int duracion) {
        labelDuracion.setText(Integer.toString(duracion) + " minutos");
    }

    /**
     *
     * @param nota
     */
    public void setNota(double nota) {
        labelNota.setText(Double.toString(nota) + "/5");
    }
    
    // Método para establecer la imagen del póster

    /**
     *
     * @param imagen
     */
    public void setPoster(ImageIcon imagen) {
        labelPoster.setIcon(imagen);
    }
    
    
    
    
    
    /* MÉTODOS PARA LOS BOTONES DE LAS LISTAS */
    
    
/**
 * Obtiene el nombre de usuario actual utilizando el método estático "getUsuario()" de la clase Login. 
 * Si el nombre de usuario no es nulo ni está vacío, lo devuelve. 
 * Si no se puede obtener el nombre de usuario, muestra un mensaje de error y devuelve null.
 * 
 * @return El nombre de usuario actual si se puede obtener; de lo contrario, null.
 */
private String obtenerUsuarioActual() {
    String usuarioActual = Login.getUsuario(); // Llama al método para obtener el nombre de usuario actual desde tu clase de login
    if (usuarioActual != null && !usuarioActual.isEmpty()) {
        return usuarioActual;
    } else {
        JOptionPane.showMessageDialog(null, "No se pudo obtener el nombre de usuario actual.", "Error", JOptionPane.ERROR_MESSAGE);
        return null;
    }
}



/**
 * Obtiene el ID de un usuario dado su nombre de usuario.
 * 
 * @param usuario El nombre de usuario del usuario del cual se desea obtener el ID.
 * @return El ID del usuario si se encuentra en la base de datos; de lo contrario, -1.
 * @throws SQLException Si ocurre algún error al ejecutar la consulta SQL.
 */
    
    private int obtenerIdUsuario(String usuario) throws SQLException {
    String sql = "SELECT id_usuario FROM usuarios WHERE usuario = ?";
    
    try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Desafio", "sa", "contraseña1234");
         PreparedStatement statement = connection.prepareStatement(sql)) {
        statement.setString(1, usuario);
        
        try (ResultSet resultSet = statement.executeQuery()) {
            if (resultSet.next()) {
                return resultSet.getInt("id_usuario");
            } else {
                // Si no se encuentra ningún usuario con el nombre especificado, podrías lanzar una excepción o devolver un valor predeterminado
                // En este caso, devolveré -1 como indicador de que no se encontró ningún usuario
                return -1;
            }
        }
    }
}

    /**
 * Obtiene el ID de una película dado su título.
 * 
 * @param titulo El título de la película de la cual se desea obtener el ID.
 * @return El ID de la película si se encuentra en la base de datos.
 * @throws SQLException Si ocurre algún error al ejecutar la consulta SQL o si no se encuentra la película.
 */
    private int obtenerIdPelicula(String titulo) throws SQLException {
    String sql = "SELECT id_pelicula FROM peliculas WHERE titulo = ?";
    
    try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Desafio", "sa", "contraseña1234");
         PreparedStatement statement = connection.prepareStatement(sql)) {
        statement.setString(1, titulo);
        
        try (ResultSet resultSet = statement.executeQuery()) {
            resultSet.next(); // Nos movemos al primer resultado, asumiendo que siempre habrá al menos uno
            return resultSet.getInt("id_pelicula");
        }
    }
}

    
    /**
 * Verifica si una película está en la lista de un usuario.
 * 
 * @param idUsuario El ID del usuario cuya lista se quiere verificar.
 * @param idPelicula El ID de la película que se quiere verificar en la lista.
 * @param tipoLista El tipo de lista que se quiere verificar (por ejemplo, "Vista", "Quiero ver", "Favorita").
 * @return true si la película está en la lista del usuario; false en caso contrario.
 * @throws SQLException Si ocurre algún error al ejecutar la consulta SQL.
 */
    private boolean peliculaEnLista(int idUsuario, int idPelicula, String tipoLista) throws SQLException {
    String sql = "SELECT * FROM listas WHERE id_usuario = ? AND id_pelicula = ? AND tipo_lista = ?";
    
    try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Desafio", "sa", "contraseña1234");
         PreparedStatement statement = connection.prepareStatement(sql)) {
        statement.setInt(1, idUsuario);
        statement.setInt(2, idPelicula);
        statement.setString(3, tipoLista);
        
        try (ResultSet resultSet = statement.executeQuery()) {
            return resultSet.next();
        }
    }
}
    
    /**
 * Inserta una película en la lista de un usuario.
 * 
 * @param idUsuario El ID del usuario en cuya lista se quiere insertar la película.
 * @param idPelicula El ID de la película que se quiere insertar en la lista.
 * @param tipoLista El tipo de lista en la que se quiere insertar la película (por ejemplo, "Vista", "Quiero ver", "Favorita").
 * @throws SQLException Si ocurre algún error al ejecutar la consulta SQL.
 */
    private void insertarEnLista(int idUsuario, int idPelicula, String tipoLista) throws SQLException {
    String sql = "INSERT INTO listas (id_usuario, id_pelicula, tipo_lista) VALUES (?, ?, ?)";
    
    try (Connection connection = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=Desafio", "sa", "contraseña1234");
         PreparedStatement statement = connection.prepareStatement(sql)) {
        statement.setInt(1, idUsuario);
        statement.setInt(2, idPelicula);
        statement.setString(3, tipoLista);
        
        int filasInsertadas = statement.executeUpdate();
        
        if (filasInsertadas > 0) {
            JOptionPane.showMessageDialog(null, "Película añadida.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo añadir la película a la lista.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error al conectar a la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}

    
    /* MÉTODOS PARA IMPRIMIR */
   
    /**
 * Imprime la ficha técnica de la película.
 */
    private void imprimirFichaTecnica() {
    // Crear un objeto PrinterJob
    PrinterJob printerJob = PrinterJob.getPrinterJob();
    
    // Obtener la página para imprimir
    PageFormat pageFormat = printerJob.pageDialog(printerJob.defaultPage());
    printerJob.setPrintable(new Printable() {
        @Override
        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
            if (pageIndex > 0) {
                return Printable.NO_SUCH_PAGE;
            }

            // Crear un objeto Graphics2D a partir de Graphics
            Graphics2D g2d = (Graphics2D) graphics;
            g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

            // Llamar al método para dibujar la ficha técnica
            drawFichaTecnica(g2d, pageFormat);

            return Printable.PAGE_EXISTS;
        }
    });

    // Intentar imprimir la ficha técnica
    if (printerJob.printDialog()) {
        try {
            printerJob.print();
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null, "Error al imprimir la ficha técnica", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
}
    
    
    /**
 * Dibuja la ficha técnica de la película en el área especificada.
 * 
 * @param g2d        Objeto Graphics2D utilizado para dibujar.
 * @param pageFormat Formato de la página de impresión.
 */
    private void drawFichaTecnica(Graphics2D g2d, PageFormat pageFormat) {
    // Establecer la fuente y el tamaño del texto para el título
    Font fontTitulo = new Font("Arial", Font.BOLD, 20);
    g2d.setFont(fontTitulo);

    // Dibujar el título de la ficha técnica centrado en la parte superior
    String titulo = "Ficha Técnica";
    FontMetrics fmTitulo = g2d.getFontMetrics();
    int tituloWidth = fmTitulo.stringWidth(titulo);
    int xTitulo = (int) ((pageFormat.getImageableWidth() - tituloWidth) / 2);
    g2d.drawString(titulo, xTitulo, 100);

    // Establecer la fuente y el tamaño del texto para los detalles
    Font fontDetalle = new Font("Arial", Font.PLAIN, 12);
    g2d.setFont(fontDetalle);

    // Definir la posición inicial vertical para los detalles
    int yDetalle = 140;

    // Dibujar los detalles de la ficha técnica
    drawDetalle(g2d, "Título:", labelTitulo.getText(), yDetalle);
    drawDetalle(g2d, "Año:", labelAño.getText(), yDetalle += 20);
    drawDetalle(g2d, "Duración:", labelDuracion.getText(), yDetalle += 20);
    drawDetalle(g2d, "Puntuación:", labelNota.getText(), yDetalle += 20);

    // Capturar la imagen del póster y dibujarla ajustando su tamaño
    Icon icon = labelPoster.getIcon();
    if (icon instanceof ImageIcon) {
        ImageIcon imageIcon = (ImageIcon) icon;
        Image image = imageIcon.getImage();
        int imageWidth = image.getWidth(null);
        int imageHeight = image.getHeight(null);

        // Definir el ancho máximo deseado para la imagen
        int maxWidth = 200;

        // Calcular la altura correspondiente para mantener la proporción de aspecto
        int maxHeight = (int) ((double) maxWidth / imageWidth * imageHeight);

        // Calcular la posición de la imagen centrada
        int xImage = (int) ((pageFormat.getImageableWidth() - maxWidth) / 2);
        int yImage = yDetalle + 40; // Espacio adicional después de los detalles

        // Dibujar la imagen con el tamaño ajustado
        g2d.drawImage(image, xImage, yImage, maxWidth, maxHeight, null);
    }
}


    
/**
 * Dibuja los detalles de la ficha técnica, que consisten en una etiqueta y un valor, en la posición especificada.
 * 
 * @param g2d     Objeto Graphics2D utilizado para dibujar.
 * @param etiqueta Etiqueta que describe el detalle.
 * @param valor    Valor correspondiente al detalle.
 * @param y        Coordenada y en la que se dibujarán los detalles.
 */
private void drawDetalle(Graphics2D g2d, String etiqueta, String valor, int y) {
    // Establecer la fuente y el tamaño del texto para los detalles
    Font fontDetalle = new Font("Arial", Font.PLAIN, 12);
    g2d.setFont(fontDetalle);

    // Dibujar etiqueta y valor
    g2d.drawString(etiqueta, 100, y);
    g2d.drawString(valor, 200, y);
}
    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ficha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ficha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ficha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ficha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Ficha dialog = new Ficha(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFavorita;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnQuieroVer;
    private javax.swing.JButton btnSalirFicha;
    private javax.swing.JButton btnVista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JSeparator jSeparator15;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JLabel labelAño;
    private javax.swing.JLabel labelDirector;
    private javax.swing.JLabel labelDuracion;
    private javax.swing.JLabel labelFichaTecnica;
    private javax.swing.JLabel labelGenero;
    private javax.swing.JLabel labelNota;
    private javax.swing.JLabel labelPoster;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JPanel panelHeaderFicha;
    // End of variables declaration//GEN-END:variables
}
